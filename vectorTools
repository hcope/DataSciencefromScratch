#chapter 4 addresses that python doesn't work on lists as if they were vectors. So yay, helpful vector functions!
import math

def vector_add(a, b):
    return [a_i + b_i for a_i, b_i in zip(a, b)]

def vector_subtract(a, b):
    return [a_i - b_i for a_i, b_i in zip(a,b)]
    
def vector_sum(vectors):
    """
    Takes in a list of vectors, adds them all together into one supervector
    """
    vectorSum = vectors[0]
    for vector in vectors[1:]:
        vectorSum = vector_add(vectorSum, vector)
    return vectorSum
    
def scalar_multiply(a, c):
    return [c * a_i for a_i in a]
    
def vector_mean(vectors):
    """
    Takes in a list of vectors
    Outputs a vector were the ith element is the average of the ith element of the vectors
    assumes that vectors are all the same size
    """
    n = len(vectors)
    return scalar_multiply(1.0/n, vector_sum(vectors))
    
def dot_product(a, b):
    """
    Note this also assumes same sized vectors.
    """
    return sum(a_i * b_i for a_i, b_i in zip(a, b))

def sum_of_squares(a):
    """
    Dot product of a vector with itself
    Mainly a helper function for magnitude
    """
    return dot_product(a, a)

def vector_magnitude(a):
    return math.sqrt(sum_of_squares(a))
    
def squared_distance(a, b):
    return sum_of_squares(vector_subtract(a, b))
    
def distance(a, b)
    return vector_magnitude(vector_subtract(a, b))
